properties([
    parameters([
        string(name: 'DOCKER_REGISTRY_DOWNLOAD_URL', defaultValue: 'nexus-docker-private-group.ossim.io', description: 'Repository of docker images'),
        string(name: 'KAKADU_VERSION', defaultValue: 'OrchidIsland-2.11.1', description: 'Tag of ossim-private to use for kakadu'),
        booleanParam(name: 'CLEAN_WORKSPACE', defaultValue: true, description: 'Clean the workspace at the end of the run')
    ]),
    pipelineTriggers([
        [$class: "GitHubPushTrigger"]
    ]),
    [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/ossimlabs/ossim-alpine-minimal.git'],
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '3', daysToKeepStr: '', numToKeepStr: '20')),
    disableConcurrentBuilds()
])
podTemplate(
    containers: [
        containerTemplate(
            name: 'git',
            image: 'alpine/git:latest',
            ttyEnabled: true,
            command: 'cat',
            envVars: [
                envVar(key: 'HOME', value: '/root')
            ]
        ),
        containerTemplate(
            name: 'docker',
            image: 'docker:19.03.8',
            ttyEnabled: true,
            command: 'cat',
            privileged: true
        )
    ],
    volumes: [
        hostPathVolume(
            hostPath: '/var/run/docker.sock',
            mountPath: '/var/run/docker.sock'
        )
    ]
) {
  node(POD_LABEL) {
    stage("Checkout") {

      scmVars = checkout(scm)

      GIT_BRANCH_NAME = scmVars.GIT_BRANCH
      BRANCH_NAME = """${sh(returnStdout: true, script: "echo ${GIT_BRANCH_NAME} | awk -F'/' '{print \$2}'").trim()}"""

      VERSION = readFile("version.txt").trim()

      GIT_TAG_NAME = "ossim-alpine" + "-" + VERSION
      ARTIFACT_NAME = "ArtifactName"

      script {
        if (BRANCH_NAME == 'master') {
          buildName "${VERSION} - ${BRANCH_NAME}"
        } else {
          buildName "${VERSION} - ${BRANCH_NAME}-SNAPSHOT"
        }
      }
    }

    stage("Load Variables") {
      withCredentials([string(credentialsId: 'o2-artifact-project', variable: 'o2ArtifactProject')]) {
        step([$class     : "CopyArtifact",
              projectName: o2ArtifactProject,
              filter     : "common-variables.groovy",
              flatten    : true])
      }

      load "common-variables.groovy"

      if (BRANCH_NAME == 'master') {
        TAG_NAME = VERSION
      } else {
        TAG_NAME = BRANCH_NAME + "-" + System.currentTimeMillis()
      }
    }

    stage("Checkout Dependencies Source Code") {
      withCredentials([usernameColonPassword(credentialsId: 'nexusCredentials', variable: 'NEXUS_CREDENTIALS')]) {
        dir("builder-image/tgz") {
          sh """
            curl -X GET -u ${NEXUS_CREDENTIALS} https://nexus.ossim.io/repository/ossim-dependencies/alpine-gdal.tgz -O
            curl -X GET -u ${NEXUS_CREDENTIALS} https://nexus.ossim.io/repository/ossim-dependencies/alpine-geos.tgz -O
            curl -X GET -u ${NEXUS_CREDENTIALS} https://nexus.ossim.io/repository/ossim-dependencies/alpine-geotiff.tgz -O
            curl -X GET -u ${NEXUS_CREDENTIALS} https://nexus.ossim.io/repository/ossim-dependencies/alpine-kakadu.tgz -O
          """
        }
      }
    }

    stage("Create Builder Image") {
      container('docker') {
        withDockerRegistry(credentialsId: 'dockerCredentials', url: "https://${DOCKER_REGISTRY_DOWNLOAD_URL}") {
          dir("builder-image") {
            sh """
              docker build --network=host -t ${DOCKER_REGISTRY_PRIVATE_UPLOAD_URL}/ossim-alpine-builder:${TAG_NAME} ./builder-image
            """
          }
        }
      }
    }

    stage("Push Builder Image") {
      container('docker') {
        withDockerRegistry(credentialsId: 'dockerCredentials', url: "https://${DOCKER_REGISTRY_PRIVATE_UPLOAD_URL}") {
          sh """
            docker push ${DOCKER_REGISTRY_PRIVATE_UPLOAD_URL}/ossim-alpine-builder:${TAG_NAME}
          """
        }
      }
    }
  }
}
