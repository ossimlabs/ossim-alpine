
properties([
    parameters ([
        string(name: 'DOCKER_REGISTRY_DOWNLOAD_URL', defaultValue: 'nexus-docker-private-group.ossim.io', description: 'Repository of docker images'),
        string(name: 'KAKADU_VERSION', defaultValue: 'OrchidIsland-2.11.1', description: 'Tag of ossim-private to use for kakadu'),
        booleanParam(name: 'CLEAN_WORKSPACE', defaultValue: true, description: 'Clean the workspace at the end of the run')
    ]),
    pipelineTriggers([
            [$class: "GitHubPushTrigger"]
    ]),
    [$class: 'GithubProjectProperty', displayName: '', projectUrlStr: 'https://github.com/ossimlabs/ossim-alpine-minimal.git'],
    buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '3', daysToKeepStr: '', numToKeepStr: '20')),
    disableConcurrentBuilds()
])
podTemplate(
    containers: [
    containerTemplate(
        name: 'curl',
        image: 'curlimages/curl:7.71.1',
        ttyEnabled: true,
        command: 'cat',
    ),
    containerTemplate(
      name: 'docker',
      image: 'docker:19.03.8',
      ttyEnabled: true,
      command: 'cat',
      privileged: true
    )
  ],
  volumes: [
    hostPathVolume(
      hostPath: '/var/run/docker.sock',
      mountPath: '/var/run/docker.sock'
    )
  ]
)
{
    node(POD_LABEL){

        stage("Checkout")
        {
                checkout(scm)
                
        }

        stage("Load Variables")
        {
            withCredentials([string(credentialsId: 'o2-artifact-project', variable: 'o2ArtifactProject')]) {
                step ([$class: "CopyArtifact",
                    projectName: o2ArtifactProject,
                    filter: "common-variables.groovy",
                    flatten: true])
            }

            load "common-variables.groovy"
        }

        stage ("Checkout Dependencies Source Code") 
        {   
            container("curl"){
                withCredentials([usernameColonPassword(credentialsId: 'nexusCredentials', variable: 'NEXUS_CREDENTIALS')]){
                    dir("tgz") {
                        sh """
                            curl -X GET -u ${NEXUS_CREDENTIALS} https://nexus.ossim.io/repository/ossim-dependencies/alpine-gdal.tgz -O
                            curl -X GET -u ${NEXUS_CREDENTIALS} https://nexus.ossim.io/repository/ossim-dependencies/alpine-geos.tgz -O
                            curl -X GET -u ${NEXUS_CREDENTIALS} https://nexus.ossim.io/repository/ossim-dependencies/alpine-geotiff.tgz -O
                            curl -X GET -u ${NEXUS_CREDENTIALS} https://nexus.ossim.io/repository/ossim-dependencies/alpine-kakadu.tgz -O
                        """
                    }
                }
            }
        }

        stage ("Create Builder Image") {
            container('docker'){         
                
                withDockerRegistry(credentialsId: 'dockerCredentials', url: "https://${DOCKER_REGISTRY_DOWNLOAD_URL}") {
                    dir("builder-image"){
                        sh """
                        apk update && apk add bash
                        ./build.sh --network=host
                        ls -lR
                        """
                    }
                }
            }
        }

        stage ("Push Builder Image") {
            container('docker'){                  
                withDockerRegistry(credentialsId: 'dockerCredentials', url: "https://${DOCKER_REGISTRY_PRIVATE_UPLOAD_URL}") {
                    sh """
                        docker tag ossim-alpine-builder:local ${DOCKER_REGISTRY_PRIVATE_UPLOAD_URL}/ossim-alpine-builder:\$(cat version.txt)
                        docker push ${DOCKER_REGISTRY_PRIVATE_UPLOAD_URL}/ossim-alpine-builder:\$(cat version.txt)
                    """
                }
            }
        }

        stage("Clean Workspace")
        {
            if ("${CLEAN_WORKSPACE}" == "true")
                step([$class: 'WsCleanup'])
        }
    }
}
